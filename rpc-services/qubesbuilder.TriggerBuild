#!/bin/bash --
# Service called from network-exposed VM (probably sys-net) into actual build
# VM to (potentially) trigger a build when a properly signed version tag is
# being pushed.
# The only thing in service argument is component name. Then each
# qubes-builder instance (if multiple of them) will check if actually git
# repository (branch configured in builder.conf) contains new version tag at
# the top.

set -eux

# Don't read anything from standard input
exec </dev/null

scripts_dir="/usr/local/lib/qubes-builder-github"

# also, don't return anything; log it locally, just in case
mkdir -p "$HOME/builder-github-logs"
log_basename="$HOME/builder-github-logs/$(date +%s)-$$"
exec >>"${log_basename}.log" 2>&1

if [[ "$#" -ne 1 ]]; then
    echo "Wrong number of arguments (expected 1, got $#)" >&2
    exit 1
fi

untrusted_component_name="$1"
shift

# check that component name is not too long
if [[ "${#untrusted_component_name}" -gt 64 ]]; then
    echo "Component name too long (got ${#untrusted_component_name}, limit 64)" >&2
    exit 1
fi

# validate component name - forbid '/', '.' and space
# note that some validation has already been done by qrexec
case "${untrusted_component_name}" in
    *[/.\ ]*)
        echo "Forbidden character" >&2
        exit 1
        ;;
    "")
        echo "Empty component name" >&2
        exit 1
        ;;
esac

set -e

scripts_dir="/usr/local/lib/qubes-builder-github"

# shellcheck source=lib/functions.sh
. "$scripts_dir/functions.sh"

printf 'Build-component %s' "$untrusted_component_name" > "$tmpdir/component"

"$scripts_dir/github-command.py" --no-signer-github-command-check Build-component "$tmpdir/component"
